name: Promote to UAT (SHA + Tag)

on:
  # manual trigger for promotion to UAT
  workflow_dispatch:
    inputs:
      app_name:
        description: "App name"
        required: true
        type: choice
        options:
          - api
          - frontend
      app_version:
        description: "App version (e.g. 1.0.10)"
        required: true
        type: string
      image_sha:
        description: "Image SHA built on dev"
        required: true
        type: string
      enforce_version_check:
        description: "Ensure app version and version.txt match"
        type: boolean
        required: false
        default: true

  # Trigger the workflow automatically via a Git tag
  push:
    tags:
      - 'uat/*'  # Trigger workflow on tags like 'uat/api/v1.0.10-rc'

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  NON_PROD_API_ECR_NAME: ${{ vars.NON_PROD_API_ECR_NAME }}
  NON_PROD_FRONTEND_ECR_NAME: ${{ vars.NON_PROD_FRONTEND_ECR_NAME }}

jobs:
  prepare-input:
    name: Prepare Inputs For Workflow
    runs-on: ubuntu-latest

    outputs:
      app_name: ${{ steps.required-inputs.outputs.app_name }}
      app_version: ${{ steps.required-inputs.outputs.app_version }}
      image_sha: ${{ steps.required-inputs.outputs.image_sha }}
      image_tag: ${{ steps.required-inputs.outputs.image_tag }}
      source_ecr_name: ${{ steps.required-inputs.outputs.source_ecr_name }}
      destination_ecr_name: ${{ steps.required-inputs.outputs.destination_ecr_name }}

    steps:
      - name: Determine Input For Promotion
        id: required-inputs
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            APP_NAME="${{ github.event.inputs.app_name }}"
            APP_VERSION="${{ github.event.inputs.app_version }}"
            IMAGE_SHA="${{ github.event.inputs.image_sha }}"
          elif [ "${{ github.event_name }}" == "push" ]; then
            TAG_NAME=${GITHUB_REF#refs/tags/}
            echo "Full tag name: $TAG_NAME"
            
            # Extract app name
            APP_NAME=$(echo "$TAG_NAME" | cut -d'/' -f2)

            # Extract version part (e.g., 'v1.0.10-rc')
            VERSION_PART=$(echo "$TAG_NAME" | cut -d'/' -f3)  # 'v1.0.10-rc'

            # Remove leading "v" and trailing "-rc" using sed
            APP_VERSION=$(echo "$VERSION_PART" | sed 's/^v//' | sed 's/-rc$//')
            
            IMAGE_SHA="${{ github.sha }}"
            ENFORCE_VERSION_CHECK=true
          fi

          IMAGE_TAG="v${APP_VERSION}-rc"

          if [ "$APP_NAME" == "api" ]; then
            SOURCE_ECR_NAME=$NON_PROD_API_ECR_NAME
            DESTINATION_ECR_NAME=$NON_PROD_API_ECR_NAME
          elif [ "$APP_NAME" == "frontend" ]; then
            SOURCE_ECR_NAME=$NON_PROD_FRONTEND_ECR_NAME
            DESTINATION_ECR_NAME=$NON_PROD_FRONTEND_ECR_NAME
          fi

          echo "app_name=$APP_NAME" >> $GITHUB_OUTPUT
          echo "app_version=$APP_VERSION" >> $GITHUB_OUTPUT
          echo "image_sha=$IMAGE_SHA" >> $GITHUB_OUTPUT
          echo "image_tag=$IMAGE_TAG" >> $GITHUB_OUTPUT
          echo "source_ecr_name=$SOURCE_ECR_NAME" >> $GITHUB_OUTPUT
          echo "destination_ecr_name=$DESTINATION_ECR_NAME" >> $GITHUB_OUTPUT

          # Output values to the log for debugging
          echo "APP_NAME: $APP_NAME"
          echo "APP_VERSION: $APP_VERSION"
          echo "IMAGE_SHA: $IMAGE_SHA"
          echo "SOURCE_ECR_NAME: $SOURCE_ECR_NAME"
          echo "DESTINATION_ECR_NAME: $DESTINATION_ECR_NAME"

  add-image-tags:
    needs: [prepare-input]
    name: Add Additional Tags To Image
    permissions:
      id-token: write
      contents: read
    uses: ./.github/workflows/reusable-docker-add-tags.yml
    with:
      environment: uat
      app_name: ${{ needs.prepare-input.outputs.app_name }}
      app_version: ${{ needs.prepare-input.outputs.app_version }}
      image_sha: ${{ needs.prepare-input.outputs.image_sha }}
      image_tag: ${{ needs.prepare-input.outputs.image_tag }}
      # enforce_version_check: ${{ github.event_name == 'push' && 'true' || github.event.inputs.enforce_version_check }}
      source_ecr_name: ${{ needs.prepare-input.outputs.source_ecr_name  }}
      destination_ecr_name: ${{ needs.prepare-input.outputs.destination_ecr_name  }}
    secrets:
      AWS_ROLE_TO_ASSUME: ${{ secrets.AWS_ROLE_TO_ASSUME }}
      AWS_REGION: ${{ secrets.AWS_REGION }}

  create-pr:
    needs: [prepare-input, add-image-tags]
    name: Create PR for promotion
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write

    env:
      APP_NAME: ${{ needs.prepare-input.outputs.app_name }}
      APP_VERSION: ${{ needs.prepare-input.outputs.app_version }}
      IMAGE_SHA: ${{ needs.prepare-input.outputs.image_sha }}
      IMAGE_TAG: ${{ needs.prepare-input.outputs.image_tag }}

    steps:
      - name: Checkout uat branch
        uses: actions/checkout@v4
        with:
          ref: uat

      - name: Setup PR Details
        id: pr_details
        run: |
          TITLE="Promote $APP_NAME ($IMAGE_SHA) to UAT"
          BODY=$(cat <<EOF
          This PR promotes this image to the UAT environment.

          - **$APP_NAME Version:** \`$IMAGE_SHA\` -> \`$IMAGE_TAG\`

          Please review and merge to deploy.
          EOF
          )

          # Use multiline string outputs for use in the next step
          echo "title<<EOF" >> $GITHUB_OUTPUT
          echo "$TITLE" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          echo "body<<EOF" >> $GITHUB_OUTPUT
          echo "$BODY" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Update Helm Values for UAT
        run: |
          sudo wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/bin/yq && sudo chmod +x /usr/bin/yq

          if [[ "$APP_NAME" == "api" ]]; then
            yq -i '.api.image.tag = strenv(IMAGE_TAG)' helm/ce10grp2-app/values-uat.yaml
          elif [[ "$APP_NAME" == "frontend" ]]; then
            yq -i '.frontend.image.tag = strenv(IMAGE_TAG)' helm/ce10grp2-app/values-uat.yaml
          fi

      - name: Create Pull Request to UAT
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          base: "uat"
          branch: "promote-uat/${{ needs.prepare-input.outputs.app_name }}-${{ github.run_id }}"
          title: ${{ steps.pr_details.outputs.title }}
          body: ${{ steps.pr_details.outputs.body }}
          commit-message: ${{ steps.pr_details.outputs.title }}
