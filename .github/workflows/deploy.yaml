name: Build and Deploy with Helm + ArgoCD

on:
  # Trigger the build and auto-deploy to 'dev' when code is pushed to the dev branch
  push:
    branches:
      - dev

  # Allow manual promotion to UAT and Prod
  workflow_dispatch:
    inputs:
      git_sha:
        description: "Commit SHA to deploy (use the full SHA)"
        required: true
      environment:
        description: "Environment to deploy to"
        required: true
        type: choice
        options: [uat, prod]

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com

jobs:
  # =================================================================
  # JOB 1: Build the image only once
  # =================================================================
  build:
    name: Build and Push to ECR
    runs-on: ubuntu-latest
    # This job runs only on pushes to the dev branch
    if: github.event_name == 'push' && github.ref == 'refs/heads/dev'
    permissions:
      id-token: write
      contents: read
    outputs:
      image_tag: ${{ steps.vars.outputs.sha }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set Image Tag variable
        id: vars
        run: echo "sha=$(echo ${{ github.sha }} | cut -c1-7)" >> $GITHUB_OUTPUT

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          role-session-name: ${{ github.run_id }}-build
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and Push API Image
        env:
          ECR_REPOSITORY: ce10grp2-app/api
          IMAGE_TAG: ${{ steps.vars.outputs.sha }}
        run: |
          # Build and push API image
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG ./api
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

          # Also tag as 'dev' for dev environment
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:dev
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:dev

      - name: Build and Push Frontend Image
        env:
          ECR_REPOSITORY: ce10grp2-app/frontend
          IMAGE_TAG: ${{ steps.vars.outputs.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG ./frontend
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

          # Also tag as 'dev' for dev environment
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:dev
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:dev

      - name: Update Helm Chart for Dev
        run: |
          # Update the image tags in values-dev.yaml
          sed -i "s|tag: .*|tag: ${{ steps.vars.outputs.sha }}|g" helm/ce10grp2-app/values-dev.yaml

          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add helm/ce10grp2-app/values-dev.yaml
          git commit -m "Update dev image tags to ${{ steps.vars.outputs.sha }}"
          git push origin dev

  # =================================================================
  # JOB 2: Scan the image for vulnerabilities
  # =================================================================
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/dev'
    permissions:
      id-token: write
      contents: read
      security-events: write

    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          role-session-name: ${{ github.run_id }}-scan
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Run Trivy scan on API image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: "${{ env.ECR_REGISTRY }}/ce10grp2-app/api:${{ needs.build.outputs.image_tag }}"
          format: "sarif"
          output: "trivy-api-results.sarif"
          severity: "CRITICAL,HIGH"

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: "trivy-api-results.sarif"

      - name: Run Trivy scan on Frontend image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: "${{ env.ECR_REGISTRY }}/ce10grp2-app/frontend:${{ needs.build.outputs.image_tag }}"
          format: "sarif"
          output: "trivy-frontend-results.sarif"
          severity: "CRITICAL,HIGH"

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: "trivy-frontend-results.sarif"

  # =================================================================
  # JOB 3: Promote to any environment
  # =================================================================
  promote:
    name: Promote to ${{ github.event.inputs.environment }}
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    environment:
      name: ${{ github.event.inputs.environment }}
    permissions:
      id-token: write
      contents: write

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          ref: main # Always update main branch for promotions

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          role-session-name: github-actions-promote
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Verify Image Exists
        run: |
          aws ecr describe-images \
            --repository-name ce10grp2-app/api \
            --image-ids imageTag=${{ github.event.inputs.git_sha }} \
            --region ${{ env.AWS_REGION }}

      - name: Tag Images for Environment
        env:
          IMAGE_TAG: ${{ github.event.inputs.git_sha }}
          TARGET_ENV: ${{ github.event.inputs.environment }}
        run: |
          # Pull and retag API image
          docker pull $ECR_REGISTRY/ce10grp2-app/api:$IMAGE_TAG
          docker tag $ECR_REGISTRY/ce10grp2-app/api:$IMAGE_TAG $ECR_REGISTRY/ce10grp2-app/api:$TARGET_ENV
          docker push $ECR_REGISTRY/ce10grp2-app/api:$TARGET_ENV

          # Pull and retag Frontend image
          docker pull $ECR_REGISTRY/ce10grp2-app/frontend:$IMAGE_TAG
          docker tag $ECR_REGISTRY/ce10grp2-app/frontend:$IMAGE_TAG $ECR_REGISTRY/ce10grp2-app/frontend:$TARGET_ENV
          docker push $ECR_REGISTRY/ce10grp2-app/frontend:$TARGET_ENV

      - name: Update Helm Values
        run: |
          ENV_NAME="${{ github.event.inputs.environment }}"
          VALUES_FILE="helm/ce10grp2-app/values-${ENV_NAME}.yaml"

          # Update image tags
          sed -i "s|tag: .*|tag: ${{ github.event.inputs.git_sha }}|g" $VALUES_FILE

          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add $VALUES_FILE
          git commit -m "Promote ${{ github.event.inputs.git_sha }} to ${ENV_NAME}"
          git push origin main
