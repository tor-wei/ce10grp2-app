name: Deploy to Kubernetes

on:
  push:
    branches:
      - main # Deploys to 'prod'
      - uat # Deploys to 'uat'
      - dev # Deploys to 'dev'

  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy to"
        required: true
        type: choice
        options: [dev, uat, prod]
        default: "dev"

jobs:
  deploy:
    name: Deploy to K8s Namespace
    runs-on: ubuntu-latest
    environment:
      name: ${{ (github.ref == 'refs/heads/main' && 'prod') || (github.ref == 'refs/heads/uat' && 'uat') || (github.ref == 'refs/heads/dev' && 'dev') || github.event.inputs.environment }}
    permissions:
      id-token: write
      contents: read

    steps:
      # STEP 1: SETUP
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set Environment Specifics
        id: set_env
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" || "${{ github.event.inputs.environment }}" == "prod" ]]; then
            echo "K8S_OVERLAY_PATH=k8s/overlays/prod" >> $GITHUB_ENV
            echo "CLUSTER_NAME=${{ secrets.PROD_CLUSTER_NAME }}" >> $GITHUB_ENV
          elif [[ "${{ github.ref }}" == "refs/heads/uat" || "${{ github.event.inputs.environment }}" == "uat" ]]; then
            echo "K8S_OVERLAY_PATH=k8s/overlays/uat" >> $GITHUB_ENV
            echo "CLUSTER_NAME=${{ secrets.NON_PROD_CLUSTER_NAME }}" >> $GITHUB_ENV
          elif [[ "${{ github.ref }}" == "refs/heads/dev" || "${{ github.event.inputs.environment }}" == "dev" ]]; then
            echo "K8S_OVERLAY_PATH=k8s/overlays/dev" >> $GITHUB_ENV
            echo "CLUSTER_NAME=${{ secrets.NON_PROD_CLUSTER_NAME }}" >> $GITHUB_ENV
          fi

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          role-session-name: ${{ github.run_id }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # STEP 2: BUILD AND PUSH IMAGES
      - name: Build, tag, and push images to ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          API_ECR_REPOSITORY: lingo-game-api
          FE_ECR_REPOSITORY: lingo-game-frontend
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build and push API image
          docker build -t $ECR_REGISTRY/$API_ECR_REPOSITORY:$IMAGE_TAG ./api
          docker push $ECR_REGISTRY/$API_ECR_REPOSITORY:$IMAGE_TAG

          # Build and push Frontend image
          docker build -t $ECR_REGISTRY/$FE_ECR_REPOSITORY:$IMAGE_TAG ./frontend
          docker push $ECR_REGISTRY/$FE_ECR_REPOSITORY:$IMAGE_TAG

      # STEP 3: DEPLOY TO EKS
      - name: Setup Kubeconfig
        run: aws eks update-kubeconfig --region ${{ secrets.AWS_REGION }} --name ${{ env.CLUSTER_NAME }}

      - name: Update Kustomize and Deploy
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          API_ECR_REPOSITORY: lingo-game-api
          FE_ECR_REPOSITORY: lingo-game-frontend
          IMAGE_TAG: ${{ github.sha }}
        run: |
          echo "Updating Kustomize image tags..."
          cd ${{ env.K8S_OVERLAY_PATH }}
          kustomize edit set image api-placeholder=$ECR_REGISTRY/$API_ECR_REPOSITORY:$IMAGE_TAG
          kustomize edit set image frontend-placeholder=$ECR_REGISTRY/$FE_ECR_REPOSITORY:$IMAGE_TAG
          cd -

          echo "Applying Kustomize configuration to the cluster..."
          kubectl apply -k ${{ env.K8S_OVERLAY_PATH }}
