name: Build and Deploy with Helm + ArgoCD

on:
  # Trigger the build and auto-deploy to 'dev' when code is pushed to the dev branch
  push:
    branches:
      - dev
    paths:
      - "api/**" # Trigger on changes in the api directory
      - "frontend/**" # Trigger on changes in the frontend directory
      - ".github/workflows/**" # Or on changes to the workflow itself

  # Allow manual promotion to UAT and Prod
  workflow_dispatch:
    inputs:
      git_sha:
        description: "Commit SHA (Required only for UAT promotion)"
        required: false # MODIFIED
      environment:
        description: "Environment to deploy to"
        required: true
        type: choice
        options: [uat, prod]

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}

jobs:
  # =================================================================
  # JOB 1: Build the image only once
  # =================================================================
  build:
    name: Build and Push to ECR
    runs-on: ubuntu-latest
    # This job runs only on pushes to the dev branch
    if: github.event_name == 'push' && github.ref == 'refs/heads/dev'
    permissions:
      id-token: write
      contents: read
      pull-requests: write
    outputs:
      image_tag: ${{ steps.vars.outputs.sha }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set Image Tag variable
        id: vars
        run: echo "sha=$(echo ${{ github.sha }} | cut -c1-7)" >> $GITHUB_OUTPUT

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          role-session-name: ${{ github.run_id }}-build
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and Push API Image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ce10grp2-app/api
          IMAGE_TAG: ${{ steps.vars.outputs.sha }}
        run: |
          # Build and push API image
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG ./api
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

          # Also tag as 'dev' for dev environment
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:dev
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:dev
      - name: Build and Push Frontend Image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ce10grp2-app/frontend
          IMAGE_TAG: ${{ steps.vars.outputs.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG ./frontend
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

          # Also tag as 'dev' for dev environment
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:dev
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:dev

      - name: Update Helm Chart for Dev
        run: |
          # Install yq
          sudo wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/bin/yq && sudo chmod +x /usr/bin/yq

          # Update both api and frontend tags using the current commit SHA
          yq -i '.api.image.tag = "${{ steps.vars.outputs.sha }}"' helm/ce10grp2-app/values-dev.yaml
          yq -i '.frontend.image.tag = "${{ steps.vars.outputs.sha }}"' helm/ce10grp2-app/values-dev.yaml

          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add helm/ce10grp2-app/values-dev.yaml
          git commit -m "Update dev image tags to ${{ steps.vars.outputs.sha }}"

      - name: Create Pull Request to Dev
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "Promote ${{ steps.vars.outputs.sha }} to DEV"
          title: "Promote ${{ steps.vars.outputs.sha }} to DEV"
          body: "Please review and merge to deploy version `${{ steps.vars.outputs.sha }}` to the DEV environment."
          branch: "promote-dev-${{ steps.vars.outputs.sha }}" # Creates a temporary branch for the PR
          base: "dev" # The target branch for the PR

  # =================================================================
  # JOB 2: Scan the image for vulnerabilities
  # =================================================================
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/dev'
    permissions:
      id-token: write
      contents: read
      security-events: write

    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          role-session-name: ${{ github.run_id }}-scan
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      - name: Run Trivy scan on API image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: "${{ steps.login-ecr.outputs.registry }}/ce10grp2-app/api:${{ needs.build.outputs.image_tag }}"
          format: "sarif"
          output: "trivy-api-results.sarif"
          severity: "CRITICAL,HIGH"

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: "trivy-api-results.sarif"

      - name: Run Trivy scan on Frontend image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: "${{ steps.login-ecr.outputs.registry }}/ce10grp2-app/frontend:${{ needs.build.outputs.image_tag }}"
          format: "sarif"
          output: "trivy-frontend-results.sarif"
          severity: "CRITICAL,HIGH"

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: "trivy-frontend-results.sarif"

  # =================================================================
  # JOB 3A: Promote a specific commit from DEV to UAT
  # =================================================================
  promote_to_uat:
    name: Promote to UAT
    runs-on: ubuntu-latest
    if: >
      github.event_name == 'workflow_dispatch' &&
      github.event.inputs.environment == 'uat' &&
      github.event.inputs.git_sha != ''
    permissions:
      id-token: write
      contents: write
      pull-requests: write
    steps:
      - name: Checkout uat branch
        uses: actions/checkout@v4
        with:
          ref: uat

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          role-session-name: github-actions-promote-uat
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Verify Image Exists in ECR
        run: |
          aws ecr describe-images \
            --repository-name ce10grp2-app/api \
            --image-ids imageTag=${{ github.event.inputs.git_sha }} \
            --region ${{ env.AWS_REGION }}

      - name: Re-tag Image for UAT
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.event.inputs.git_sha }}
        run: |
          # Retag API image
          docker pull $ECR_REGISTRY/ce10grp2-app/api:$IMAGE_TAG
          docker tag $ECR_REGISTRY/ce10grp2-app/api:$IMAGE_TAG $ECR_REGISTRY/ce10grp2-app/api:uat
          docker push $ECR_REGISTRY/ce10grp2-app/api:uat
          # Retag Frontend image
          docker pull $ECR_REGISTRY/ce10grp2-app/frontend:$IMAGE_TAG
          docker tag $ECR_REGISTRY/ce10grp2-app/frontend:$IMAGE_TAG $ECR_REGISTRY/ce10grp2-app/frontend:uat
          docker push $ECR_REGISTRY/ce10grp2-app/frontend:uat

      - name: Update Helm Values for UAT
        run: |
          # Install yq
          sudo wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/bin/yq && sudo chmod +x /usr/bin/yq
          # Update both api and frontend tags using the manually provided git_sha
          yq -i '.api.image.tag = "${{ github.event.inputs.git_sha }}"' helm/ce10grp2-app/values-uat.yaml
          yq -i '.frontend.image.tag = "${{ github.event.inputs.git_sha }}"' helm/ce10grp2-app/values-uat.yaml

          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add helm/ce10grp2-app/values-uat.yaml
          git commit -m "Promote ${{ github.event.inputs.git_sha }} to UAT"

      - name: Create Pull Request to UAT
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "Promote ${{ github.event.inputs.git_sha }} to UAT"
          title: "Promote ${{ github.event.inputs.git_sha }} to UAT"
          body: "Please review and merge to deploy version `${{ github.event.inputs.git_sha }}` to the UAT environment."
          branch: "promote-uat-${{ github.event.inputs.git_sha }}" # Creates a temporary branch for the PR
          base: "uat" # The target branch for the PR

  # =================================================================
  # JOB 3B: Promote the current UAT version to PROD
  # =================================================================
  promote_from_uat_to_prod:
    name: Promote UAT to Production
    runs-on: ubuntu-latest
    # This job only runs when 'prod' is selected
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'prod'
    permissions:
      id-token: write
      contents: write
      pull-requests: write

    steps:
      - name: Checkout uat branch to get version
        uses: actions/checkout@v4
        with:
          ref: uat

      - name: Get current UAT image tag
        id: uat_version
        run: |
          # Install yq
          sudo wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/bin/yq && sudo chmod +x /usr/bin/yq

          # Safely read the api image tag from the uat values file
          UAT_TAG=$(yq '.api.image.tag' helm/ce10grp2-app/values-uat.yaml)
          echo "tag=$UAT_TAG" >> $GITHUB_OUTPUT

      # ADD THIS STEP to switch to the main branch context
      - name: Checkout main branch for update
        uses: actions/checkout@v4
        with:
          ref: main

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          role-session-name: github-actions-promote-prod
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Re-tag Image for Production
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ steps.uat_version.outputs.tag }}
        run: |
          # Retag API image
          docker pull $ECR_REGISTRY/ce10grp2-app/api:$IMAGE_TAG
          docker tag $ECR_REGISTRY/ce10grp2-app/api:$IMAGE_TAG $ECR_REGISTRY/ce10grp2-app/api:prod
          docker push $ECR_REGISTRY/ce10grp2-app/api:prod
          # Retag Frontend image
          docker pull $ECR_REGISTRY/ce10grp2-app/frontend:$IMAGE_TAG
          docker tag $ECR_REGISTRY/ce10grp2-app/frontend:$IMAGE_TAG $ECR_REGISTRY/ce10grp2-app/frontend:prod
          docker push $ECR_REGISTRY/ce10grp2-app/frontend:prod

      - name: Update Helm Values for Production
        run: |
          # Install yq
          sudo wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/bin/yq && sudo chmod +x /usr/bin/yq

          # Use the tag we extracted from the UAT values file
          UAT_TAG="${{ steps.uat_version.outputs.tag }}"

          # Update both api and frontend tags using the tag from the UAT values file
          yq -i ".api.image.tag = \"$UAT_TAG\"" helm/ce10grp2-app/values-prod.yaml
          yq -i ".frontend.image.tag = \"$UAT_TAG\"" helm/ce10grp2-app/values-prod.yaml

          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add helm/ce10grp2-app/values-prod.yaml
          git commit -m "Promote UAT version $UAT_TAG to Production"

      - name: Create Pull Request to Production
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "Promote UAT version ${{ steps.uat_version.outputs.tag }} to Production"
          title: "Promote UAT version ${{ steps.uat_version.outputs.tag }} to Production"
          body: "Please review and merge to deploy version `${{ steps.uat_version.outputs.tag }}` to the Production environment."
          branch: "promote-prod-${{ steps.uat_version.outputs.tag }}"
          base: "main"
