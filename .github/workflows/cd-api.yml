# .github/workflows/cd-backend.yml
name: CD - Backend (API)

on:
  push:
    branches:
      - dev
    tags:
      - "api-v*"
    paths:
      - "api/**"
      - ".github/workflows/cd-backend.yml"

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ECR_REPOSITORY: ${{ secrets.NON_PROD_API_ECR }}

jobs:
  build-backend:
    name: Build and Push API Image
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: write
      pull-requests: write
    outputs:
      primary_tag: ${{ steps.tags.outputs.primary_tag }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Define Image Tags
        id: tags
        run: |
          # Get the short commit SHA, which will always be a tag
          SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-7)
          echo "sha_tag=${SHORT_SHA}" >> $GITHUB_OUTPUT

          # Check if the trigger was a tag push
          if [[ "${{ github.ref }}" == refs/tags/api-v* ]]; then
            # Read the version from the file and construct the expected tag name
            VERSION_FROM_FILE="api-v$(cat api/version.txt)"
            PUSHED_TAG="${{ github.ref_name }}"

            # Validate that the pushed tag matches the version in the file
            if [[ "$PUSHED_TAG" != "$VERSION_FROM_FILE" ]]; then
              echo "Error: Pushed tag ($PUSHED_TAG) does not match version in api/version.txt ($VERSION_FROM_FILE)."
              exit 1
            fi

            # Use the validated pushed tag as the primary tag for the release image
            echo "primary_tag=${PUSHED_TAG}" >> $GITHUB_OUTPUT
            echo "is_release=true" >> $GITHUB_OUTPUT
          else
            # For pushes to dev, the primary tag is the short SHA
            PRIMARY_TAG="${SHORT_SHA}"
            echo "primary_tag=${PRIMARY_TAG}" >> $GITHUB_OUTPUT
            echo "is_release=false" >> $GITHUB_OUTPUT
          fi

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          role-session-name: ${{ github.run_id }}-build-backend
          aws-region: ${{ env.AWS_REGION }}

      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and Push API Image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          PRIMARY_TAG: ${{ steps.tags.outputs.primary_tag }}
          SHA_TAG: ${{ steps.tags.outputs.sha_tag }}
        run: |
          # Build the image once and apply both tags simultaneously
          docker build \
            -t $ECR_REGISTRY/$ECR_REPOSITORY:$PRIMARY_TAG \
            -t $ECR_REGISTRY/$ECR_REPOSITORY:$SHA_TAG \
            ./api

          # Push each tag to the ECR
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$PRIMARY_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$SHA_TAG

      - name: Tag and Push ':dev' Image
        # This step only runs for pushes to the 'dev' branch, not for release tags
        if: steps.tags.outputs.is_release == 'false'
        run: |
          ECR_REGISTRY=${{ steps.login-ecr.outputs.registry }}
          IMAGE_SHA_TAG=${{ steps.tags.outputs.sha_tag }}
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_SHA_TAG $ECR_REGISTRY/$ECR_REPOSITORY:dev
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:dev

      - name: Update Helm Chart for Dev
        if: steps.tags.outputs.is_release == 'false'
        run: |
          sudo wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/bin/yq && sudo chmod +x /usr/bin/yq
          yq -i '.api.image.tag = "${{ steps.tags.outputs.primary_tag }}"' helm/ce10grp2-app/values-dev.yaml

      - name: Create Pull Request to Dev
        if: steps.tags.outputs.is_release == 'false'
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          base: "dev"
          branch: "ci/promote-dev-api-${{ steps.tags.outputs.primary_tag }}"
          title: "CI: Update dev api image tag to ${{ steps.tags.outputs.primary_tag }}"
          body: "Automated PR to deploy API version `${{ steps.tags.outputs.primary_tag }}` to the DEV environment."
          commit-message: "Update dev api image tag to ${{ steps.tags.outputs.primary_tag }}"

  scan-backend:
    name: Security Scan API Image
    runs-on: ubuntu-latest
    needs: build-backend
    permissions:
      id-token: write
      contents: read
      security-events: write

    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          role-session-name: ${{ github.run_id }}-scan-backend
          aws-region: ${{ env.AWS_REGION }}

      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Run Trivy scan on API image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: "${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ needs.build-backend.outputs.primary_tag }}"
          format: "sarif"
          output: "trivy-api-results.sarif"
          severity: "CRITICAL,HIGH"

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: "trivy-api-results.sarif"
          category: backend
