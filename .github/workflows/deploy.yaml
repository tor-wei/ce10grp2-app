name: Build and Deploy to Kubernetes

on:
  # Trigger the build and auto-deploy to 'dev' when code is pushed to the dev branch
  push:
    branches:
      - dev

  # Allow manual promotion to UAT and Prod
  workflow_dispatch:
    inputs:
      git_sha:
        description: "Commit SHA to deploy (use the full SHA)"
        required: true
      environment:
        description: "Environment to deploy to"
        required: true
        type: choice
        options: [uat, prod]

jobs:
  # =================================================================
  # JOB 1: Build the image only once
  # =================================================================
  build:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    # This job runs only on pushes to the dev branch
    if: github.event_name == 'push' && github.ref == 'refs/heads/dev'
    permissions:
      id-token: write
      contents: read
    outputs:
      image_tag: ${{ steps.vars.outputs.sha }}
      ecr_registry: ${{ steps.login-ecr.outputs.registry }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set Image Tag variable
        id: vars
        run: echo "sha=${{ github.sha }}" >> $GITHUB_OUTPUT

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          role-session-name: ${{ github.run_id }}-build
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push images to ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          API_ECR_REPOSITORY: lingo-game-api
          FE_ECR_REPOSITORY: lingo-game-frontend
          IMAGE_TAG: ${{ steps.vars.outputs.sha }}
        run: |
          # Build and push API image
          docker build -t $ECR_REGISTRY/$API_ECR_REPOSITORY:$IMAGE_TAG ./api
          docker push $ECR_REGISTRY/$API_ECR_REPOSITORY:$IMAGE_TAG

          # Build and push Frontend image
          docker build -t $ECR_REGISTRY/$FE_ECR_REPOSITORY:$IMAGE_TAG ./frontend
          docker push $ECR_REGISTRY/$FE_ECR_REPOSITORY:$IMAGE_TAG

  # =================================================================
  # JOB 2: Scan the image for vulnerabilities
  # =================================================================
  security-scan:
    name: Scan Images for Vulnerabilities
    runs-on: ubuntu-latest
    needs: build # Runs only after the 'build' job succeeds
    if: github.event_name == 'push' && github.ref == 'refs/heads/dev'
    permissions:
      id-token: write # To authenticate to AWS ECR
      contents: read

    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          role-session-name: ${{ github.run_id }}-scan
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Run Trivy scanner on API image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: "${{ needs.build.outputs.ecr_registry }}/lingo-game-api:${{ needs.build.outputs.image_tag }}"
          format: "table"
          exit-code: "1" # Fail the build if vulnerabilities are found
          ignore-unfixed: true
          vuln-type: "os,library"
          severity: "CRITICAL,HIGH"

      - name: Run Trivy scanner on Frontend image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: "${{ needs.build.outputs.ecr_registry }}/lingo-game-frontend:${{ needs.build.outputs.image_tag }}"
          format: "table"
          exit-code: "1"
          ignore-unfixed: true
          vuln-type: "os,library"
          severity: "CRITICAL,HIGH"

  # =================================================================
  # JOB 3: Deploy to any environment
  # =================================================================
  deploy:
    name: Deploy to ${{ github.event.inputs.environment || 'dev' }}
    runs-on: ubuntu-latest
    # Needs the build job ONLY IF it's an automatic dev deploy
    needs: [build]
    # This job runs if it's a push to dev OR a manual dispatch
    if: always() && (needs.build.result == 'success' || github.event_name == 'workflow_dispatch')

    environment:
      # Set the GH Environment based on the trigger
      name: ${{ (github.ref == 'refs/heads/dev' && 'dev') || github.event.inputs.environment }}

    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.git_sha }} # Use the exact SHA provided by the user

      - name: Set Environment & Image Tag
        id: set_env
        run: |
          # Determine environment from trigger type
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            ENV_NAME="${{ github.event.inputs.environment }}"
            IMAGE_TAG="${{ github.event.inputs.git_sha }}"
          else
            ENV_NAME="dev"
            IMAGE_TAG="${{ needs.build.outputs.image_tag }}"
          fi

          echo "Deploying to environment: $ENV_NAME"
          echo "Using image tag: $IMAGE_TAG"
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV

          if [[ "$ENV_NAME" == "prod" ]]; then
            echo "K8S_OVERLAY_PATH=k8s/overlays/prod" >> $GITHUB_ENV
            echo "CLUSTER_NAME=${{ secrets.PROD_CLUSTER_NAME }}" >> $GITHUB_ENV
          elif [[ "$ENV_NAME" == "uat" ]]; then
            echo "K8S_OVERLAY_PATH=k8s/overlays/uat" >> $GITHUB_ENV
            echo "CLUSTER_NAME=${{ secrets.NON_PROD_CLUSTER_NAME }}" >> $GITHUB_ENV
          else
            echo "K8S_OVERLAY_PATH=k8s/overlays/dev" >> $GITHUB_ENV
            echo "CLUSTER_NAME=${{ secrets.NON_PROD_CLUSTER_NAME }}" >> $GITHUB_ENV
          fi

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          role-session-name: ${{ github.run_id }}-deploy
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Setup Kubeconfig
        run: aws eks update-kubeconfig --region ${{ secrets.AWS_REGION }} --name ${{ env.CLUSTER_NAME }}

      - name: Update Kustomize and Deploy
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          API_ECR_REPOSITORY: lingo-game-api
          FE_ECR_REPOSITORY: lingo-game-frontend
        run: |
          echo "Updating Kustomize image tags for tag: ${{ env.IMAGE_TAG }}"
          cd ${{ env.K8S_OVERLAY_PATH }}
          kustomize edit set image api-placeholder=$ECR_REGISTRY/$API_ECR_REPOSITORY:${{ env.IMAGE_TAG }}
          kustomize edit set image frontend-placeholder=$ECR_REGISTRY/$FE_ECR_REPOSITORY:${{ env.IMAGE_TAG }}
          cd -

          echo "Applying Kustomize configuration to the cluster..."
          kubectl apply -k ${{ env.K8S_OVERLAY_PATH }}
